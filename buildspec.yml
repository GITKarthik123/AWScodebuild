######BACKUPWORKINGFILE
version: 0.2
env:
  variables:
    S3_BUCKET: my-packages-bucket
      SELENIUM_VER=4.5.0
      REQUESTS_VER=2.28.1
      EDGE_VERSION_ID=120.0.2210.91  
phases:
  install:
    runtime-versions:
      nodejs: 12

  build:
    commands:
      - echo "Build Phase"
      - yum install -y git make yum-utils rpmdevtools
        # export the env variables
      #- echo REACT_APP_ENV=${ENV} >> .env
      #- echo REACT_APP_FIREBASE_API_KEY=${FIREBASE_API_KEY} >> .env
      - mkdir -p /opt/bin && \
      - mkdir -p /opt/lib && \
      - mkdir -p /opt/etc/fonts && \
      - mkdir -p /opt/usr/share && \
      - mkdir -p /opt/pylib
      - curl -# "https://msedgedriver.azureedge.net/$EDGE_VERSION_ID/edgedriver_linux64.zip?alt=media" > "edgedriver-stable.zip" && \
      - unzip edgedriver-stable.zip && \
      - rm -rf edgedriver-stable.zip && \
      - cp msedgedriver /opt && \
      - mkdir edge && \
      - cd edge && \
      - curl -v -O https://packages.microsoft.com/yumrepos/edge/microsoft-edge-stable-${EDGE_VERSION_ID}-1.x86_64.rpm -L && \
      - rpm2cpio microsoft-edge-stable-${EDGE_VERSION_ID}-1.x86_64.rpm | cpio -idmv && \
      - rm -rf microsoft-edge-stable-${EDGE_VERSION_ID}-1.x86_64.rpm && \
      - cd .. && \
      - ls edge && \
      - cp -R edge/opt/microsoft/msedge /opt
      - yum install -y python3
      - |
        yumdownloader -y \
        alsa-lib.x86_64 \
        atk.x86_64 \ 
        at-spi2-atk.x86_64 \ 
        at-spi2-core.x86_64 \
        avahi-libs.x86_64 \
        bash.x86_64 \ 
        cairo.x86_64 \
        chkconfig.x86_64 \
        cups-libs.x86_64 \
        dbus-libs.x86_64 \
        elfutils-libs.x86_64 \
        elfutils-libelf.x86_64 \
        fribidi.x86_64 \
        glib2.x86_64 \
        gnu-free-sans-fonts.x86_64 \
        gtk3.x86_64 \
        libX11.x86_64 \
        libXScrnSaver.x86_64 \
        libXau.x86_64 \
        libXcomposite.x86_64 \
        libXcursor.x86_64 \
        libXdamage.x86_64 \
        libXext.x86_64 \
        libXfixes.x86_64 \
        libXi.x86_64 \
        libXrandr.x86_64 \
        libXrender.x86_64 \
        libXtst.x86_64 \
        libblkid.x86_64 \
        libcurl.x86_64 \
        libcrypt-nss.x86_64 \
        libdrm.x86_64 \
        liberation-fonts.x86_64 \
        libgcrypt.x86_64 \
        libglvnd.x86_64 \
        libglvnd-egl.x86_64 \
        libglvnd-glx.x86_64 \
        libmount.x86_64 \
        libgpg-error.x86_64 \
        libthai.x86_64 \
        libwayland-server.x86_64 \
        libwayland-client.x86_64 \
        libxcb.x86_64 \
        libxkbcommon.x86_64 \
        fontconfig.x86_64 \
        freetype.x86_64 \
        libpng.x86_64 \
        logbash.x86_64 \
        lz4.x86_64 \
        mesa-libgbm.x86_64 \
        nspr.x86_64 \
        nss.x86_64 \
        nss-softokn.x86_64 \
        nss-util.x86_64 \
        pango.x86_64 \
        pixman.x86_64 \
        sqlite.x86_64 \
        systemd-libs.x86_64 \
        vulkan.x86_64 \
        wget.x86_64 \
        xz-libs.x86_64 \
        xdg-utils.x86_64 && \
        rpmdev-extract *.rpm && \
        cp -aR /tmp//usr/lib64/ /opt/lib && \
        cp -aR /tmp//lib64/ /opt/lib && \
        cp /lib64/libglib* /opt/lib && \
#  cp -aR /tmp//usr/share/font /opt/usr/share/ && \
#  cp -aR /tmp//etc/fonts/ /opt/etc/fonts
      - cd /opt/lib && ln -s libcrypt-nss-2.26.so libcrypt.so.1
        #pip3 install --target /opt/pylib selenium==$SELENIUM_VER requests==$REQUESTS_VER
      - pip3 install --target /opt/pylib selenium==4.5.0 requests==2.28.1
      - cd /opt && zip -u -r9 /tmp/edge-layer.zip ./*
      - ls -a /tmp
      - CHROME_VERSION_INFO=$(curl https://versionhistory.googleapis.com/v1/chrome/platforms/linux/channels/stable/versions | jq '.[]' -r)
            ##### CHROME STABLE VERSION STEPS#####
      - |
        for INDEX_NUM in {0..10}; do
          CURR_CHROME_VERSION=$(echo "$CHROME_VERSION_INFO" | jq -r ".[$INDEX_NUM].version")
          detailed_info=$(curl -s https://chromium-downloads.herokuapp.com/builds/$CURR_CHROME_VERSION/stable/linux)
          if [[ "$detailed_info" == "Not Found" ]]; then
            echo "No base revision found for chrome version $CURR_CHROME_VERSION . Will try the next available latest version";
          else
            CHROME_STABLE_REVISION_ID=$(echo $detailed_info | jq -r ".artifactsRevision")
            echo "Chrome Version Number  = $CURR_CHROME_VERSION and Artifact revision-id = $CHROME_STABLE_REVISION_ID"
            # Additional commands for processing the package
          fi
        done
      - curl -# "https://www.googleapis.com/download/storage/v1/b/chromium-browser-snapshots/o/Linux_x64%2F$CHROME_STABLE_REVISION_ID%2Fchrome-linux.zip?alt=media" > "chrome-stable.zip" && \
      - unzip "chrome-stable.zip" && \
      - rm -rf "chrome-stable.zip" && \
      - cp -R chrome-linux /opt && \
      - curl -# "https://www.googleapis.com/download/storage/v1/b/chromium-browser-snapshots/o/Linux_x64%2F$CHROME_STABLE_REVISION_ID%2Fchromedriver_linux64.zip?alt=media" > "chromedriver-stable.zip" && \
      - cp chromedriver-stable.zip /opt/chromedrivers && \
      - unzip "chromedriver-stable.zip" && \
      - rm -rf "chromedriver-stable.zip" && \
      - cp -R chromedriver_linux64/chromedriver /opt
      - cd /opt && \
      - rm -rf msedgedriver && \
      - rm -rf msedge && \
      - zip -u -r9 /tmp/chrome-layer.zip ./
      - echo "FIRST DOCKERFILE DONE"
        ##SECOND DOCKERFILE##
      - ls -lrt /tmp
      #- cp -R /tmp/chrome-layer.zip /tmp/
      #- cp -R /tmp/edge-layer.zip /tmp/
      - unzip -o /tmp/chrome-layer.zip -d /opt
      - LD_LIBRARY_PATH=/opt/lib
        # Test chrome driver executable shared libraries are available #
      - test_chrome_driver_dependency_libraries=$(ldd /opt/chromedriver | grep "not found" || echo "no matches")  && \
      - |
        if [[ "$test_chrome_driver_dependency_libraries" != "no matches" ]]; then
          echo "Chrome Driver executable shared libraries check FAILED"
          echo "Missing libraries for chrome driver executable $test_chrome_driver_dependency_libraries"
          exit 1; 
        fi
      - echo "Chrome Driver executable shared libraries check PASSED"

# Test chrome driver executable shared libraries are available #
      - test_chrome_dependency_libraries=$(ldd /opt/chrome-linux/chrome | grep "not found" || echo "no matches")  && \
      - |
        if [[ "$test_chrome_dependency_libraries" != "no matches" ]]; then 
          echo "Chrome executable shared libraries check FAILED"
          echo "Missing libraries for chrome executable $test_chrome_dependency_libraries" &&
        exit 1;
        fi
      - echo "Chrome executable shared libraries check PASSED"

# Test chrome driver executable #
      - cd /opt && \
      - uname -a
      - pwd
      - whoami
      - ls -lrt 
      - file chromedriver
      - chmod +x ./chromedriver
      - test_chrome_driver=$(/usr/bin/chromedriver -v | grep "$CHROME_STABLE_REVISION_ID" || echo "no matches")
      - |
        if [[ "$test_chrome_driver" = "no matches" ]]; then
          echo "Execute chrome driver executable check FAILED"
          exit 1;
        fi
      - echo "Chrome driver version info = $test_chrome_driver"
      - echo SECOND DOCKERFILE COMPLETED
      # Your conditional commands
      - |
        if [ "$CODEBUILD_SOURCE_VERSION_TYPE" == "pull_request" ]; then
          echo "This is a pull request build";
          # Additional commands for pull request build
        else
          echo "This is not a pull request build";
          # Additional commands for non-pull request build
        fi

    finally:
      - echo "Build Phase Finally"

  post_build:
    commands:
      - echo "Post Build Phase"
    finally:
      - echo "Post Build Phase Finally"

artifacts:
  files: '**/*'

cache:
  paths:
    - '/root/.npm'
